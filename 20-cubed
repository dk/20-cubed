#!env perl
use strict;
use warnings;
use Prima qw(Classes Application);

my $sleep = 20 * 60;
my $tick  = 20;

my $dbm = Prima::Image->new(
	width  => 100,
	height => 100,
	color => cl::White,
	backColor => cl::Black,
	type=> im::BW,
);
$dbm->begin_paint;
$dbm->clear;
$dbm->fill_ellipse( 50, 50, 100, 100 );
$dbm->end_paint;

my $gradient_mask = Prima::Image->new(
	width  => 100,
	height => 100,
	backColor => cl::Black,
);
$gradient_mask->begin_paint;
$gradient_mask->clear;
$gradient_mask->gradient_ellipse( 50, 50, 100, 100, { palette => [ cl::Black, cl::White ], poly => [0.2, 0.8, 0.3, 1] });
$gradient_mask->end_paint;
$gradient_mask->type(im::Byte);

my $gradient = $dbm->dup;
$gradient->type(im::RGB);
$gradient->begin_paint;
$gradient->gradient_bar( 0, 0, $gradient->size, { palette => [ cl::Gray, cl::White ] });
$gradient->end_paint;

my $gradient_shape = Prima::Icon->create_combined( $gradient, $gradient_mask );
$gradient_shape->premultiply_alpha;

while ( 1 ) {
	my $t;
	my $sec = $tick;
	$t = Prima::Widget->new(
		size   => [100, 100],
		origin => [ 0, $::application-> height - 100 ],
		font   => { height => 80 },
		shape  => $dbm,
		layered => 1,
		onPaint => sub {
			$t->clear;
			$t->stretch_image( 0, 0, $t-> size, $gradient_shape, rop::SrcCopy );
			$t->color(cl::Black);
			$t->draw_text($sec, 0, 0, $t->size, dt::Center|dt::VCenter);
		},
		onMouseDown => sub {
			$t-> destroy;
			$sec = 0;
		},
	);
	$t-> insert( Timer => 
		timeout => 1000,
		onTick  => sub {	
			--$sec ? $t->repaint : $t->destroy;
		},
	)->start;

	$::application->yield while $sec > 0;
	sleep($sleep);
}
